<?php

/**
 * Implements hook_page_alter
 */
function document_search_page_alter(&$page) {

  //Add document_search.js
  $path = drupal_get_path('module','document_search');
  drupal_add_js($path . '/document_search.js');

  //If we're arriving on this page from a search result, wrap the search terms in spans
  $referer = $_SERVER['HTTP_REFERER'];
  if(strpos($referer,'/search/') != 0){
    
    //get #markup and convert to QP object
    //$page_content = $page['content']['system_main']['main']['#markup'];
    
    //loop through search keys and wrap each occurence on the page with a "search-keys" class
    $search_keys = urldecode(array_pop(explode('/',$referer)));
    if(!empty($search_keys)){
      $keys=explode(' ',$search_keys);
      //pass keys to javascript. @TODO: Implement JS handling of search term highlighting
      drupal_add_js(array('document_search' => array('keys' => $keys)),'setting');
      
      ////Wrap all terms in identifying span. NOTE: This will corrupt URLs, if the search term appears in one. A javascript function cleans this.
      ////@TODO: Make this not suck. There is a better way.
      //foreach($keys as $key){        
      //  $regex = "/($key)\s/i";
      //  $page_content = preg_replace($regex,'<span class="search-keys">$1 </span>',$page_content);
      //}
   }
   //$page['content']['system_main']['main']['#markup'] = $page_content;
  }
}

function document_search_block_info() {
  $blocks['document_search'] = array(
    'info' => t('Document Search Form'), 
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
 
function document_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'document_search':
      $block['title'] = 'Book Search';
      $search_title = "Search Options";
      $book_search_title = "Search This Guide";
      $book_search_form = drupal_render(drupal_get_form('document_search_search_block_form'));
      $content = '<ul id="search-options">
                    <li id="book_search" class="menu-icon">
                      <div id="book-search-form" class="menu-drop-outer"><div class="arrow">&nbsp;</div><div class="arrow-border">&nbsp;</div>
                        <div id="book-search-form-inner" class="menu-drop-inner">
                          <h2>'.$search_title.'</h2>
                          <div class="menu-drop-options-container">
                            <div id="search-book-only" class="menu-drop-options">
                              '.$book_search_form.'
                            </div>
                          </div>
                        </div>
                      </div>
                    </li>
                  </ul>';
      
      $block['content'] = $content;
      break;
  }
  return $block;
}

function document_search_search_block_form($form, &$form_state) {

  $form['#attributes']['class'][] = 'search-form';
  $form['basic'] = array('#type' => 'container', '#attributes' => array('class' => array('container-inline')));
  $form['basic']['keys'] = array(
    '#type' => 'textfield',
    '#title' => NULL,
    '#size' => 15,
    '#defaultvalue' => '',
    '#maxlength' => 255,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#id' => 'search-submit',
  );
  
  return $form;
}

function document_search_search_block_form_submit($form, &$form_state) {
  //dpm($form);
  //dpm($form_state);

  //Get book ID of current node
  if(arg(0) == 'node' && is_numeric(arg(1))){
    $node = node_load(arg(1));
    if (!empty($node) && isset($node->book['bid'])){
      $bid = $node->book['bid'];
    }
  }
  //If $bid returns a value, we are on a book page. Set up the search URL as a doc search.
  //If $bid returns empty, we are not on a book page. Set up search URL as standard.
  if($bid != ''){
    $search_url = 'search/document/' . $bid . '/' . $form_state['values']['keys'];
  }
  else{
    $search_url = 'search/node/'. $form_state['values']['keys'];    
  }
  variable_set('search_keys',$form_state['values']['keys']);
  drupal_goto($search_url);
}

function document_search_menu() {
  $items['search/node/%'] = array(
    'page callback' => 'document_search_do_search',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function document_search_do_search($keys) {
  // set the page title
  drupal_set_title(t('Book search results'));
  // get the search results
  $results = module_invoke('node', 'search_execute', $keys . " type:faq");

  return theme('search_results', array('results' => $results));
}

