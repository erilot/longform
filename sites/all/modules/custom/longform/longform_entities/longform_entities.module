<?php
/**
 * Created by PhpStorm.
 * User: ericlotze
 * Date: 2014-10-17
 * Time: 10:44 AM
 */

/**
 * Implements hook_entity_info().
 */
function longform_entities_entity_info() {
  $info = array();
  $info['longform_ticket'] = array(
    'label' => t('Longform Ticket'),
    'base table' => 'longform_ticket',
    'entity keys' => array(
      'id' => 'tid',
      'label' => 'title',
    ),
    'entity class' => 'LongformTicket',
    'controller class' => 'LongformTicketController',
    'views controller class' => 'EntityDefaultViewsController',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/longform/ticket',
      'controller class' => 'LongformTicketUIController',
      'file' => 'longform_entities.admin.inc',
    ),
    'module' => 'longform_entities',
    'access callback' => 'longform_ticket_access_callback',
    'fieldable' => TRUE,
    'bundles' => array(
      'longform_ticket' => array(
        'label' => t('Document ticket'),
        'admin' => array(
          'path' => 'admin/longform/ticket',
          'access arguments' => array('administer tickets'),
        ),
      ),
    ),
  );

  $info['longform_set'] = array(
    'label' => t('Longform Set'),
    'base table' => 'longform_set',
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'name',
    ),
    'entity class' => 'LongformSet',
    'controller class' => 'LongformSetController',
    'views controller class' => 'EntityDefaultViewsController',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/longform/set',
      'controller class' => 'LongformSetUIController',
      'file' => 'longform_entities.admin.inc',
    ),
    'module' => 'longform_entities',
    'access callback' => 'longform_set_access_callback',
    'fieldable' => TRUE,
    'bundles' => array(
      'longform_set' => array(
        'label' => t('Document Set'),
        'admin' => array(
          'path' => 'admin/longform/set',
          'access arguments' => array('administer sets'),
        ),
      ),
    ),

  );

  return $info;
}

/**
 *  Implements hook_entity_property_info().
 */
function longform_entities_entity_property_info() {
  $info = array();

  $properties = &$info['longform_ticket']['properties'];
  $properties['tid'] = array(
    'label' => 'Ticket ID',
    'description' => 'The internal ID number of this ticket',
    'type' => 'integer',
    'schema field' => 'tid'
  );
  $properties['created'] = array(
    'label' => 'Created',
    'description' => 'When the ticket was created',
    'type' => 'date',
    'schema field' => 'created'
  );
  $properties['title'] = array(
    'label' => 'Ticket name',
    'description' => 'The name of the document ticket',
    'type' => 'text',
    'schema field' => 'title',
    'setter callback' => 'entity_property_verbatim_set'
  );
  $properties['uid'] = array(
    'label' => 'User',
    'description' => 'The user the ticket belongs to',
    'type' => 'user',
    'schema field' => 'uid',
  );
  $properties['restrictions'] = array(
    'label' => 'Restrictions',
    'description' => 'Restrictions that have been placed on this ticket',
    'type' => 'boolean',
    'schema field' => 'restrictions',
  );
  $properties['type'] = array(
    'label' => 'Type',
    'description' => 'The ticket type',
    'type' => 'text',
    'schema field' => 'type',
  );

  $info['longform_set']['properties'] = array(
    'sid' => array(
      'label' => 'Set ID',
      'description' => 'The internal ID number of this longform set',
      'type' => 'integer',
      'schema field' => 'sid',
    ),
    'name' => array(
      'label' => 'Name',
      'description' => 'The name of the longform set',
      'type' => 'text',
      'schema field' => 'name',
      'setter callback' => 'entity_property_verbatim_set'
    ),
    'created' => array(
      'label' => 'Created',
      'description' => 'When the set was created',
      'type' => 'date',
      'schema field' => 'created',
    ),
    'uid' => array(
      'label' => 'User',
      'description' => 'The user the set belongs to',
      'type' => 'user',
      'schema field' => 'uid',
    ),
    'build_temporary' => array(
      'label' => 'Temporary build field',
      'description' => 'Internal use only - contains in-progress set building information',
      'type' => 'struct',
    ),
    'type' => array(
      'label' => 'Type',
      'description' => 'The set type',
      'type' => 'text',
      'schema field' => 'type',
    ),
  );
  return $info;
}

/**
 * Implements hook_fields_extra_fields().
 */
function longform_entities_field_extra_fields() {
  $extra = array();
  $extra['longform_set']['longform_set'] = array(
    'form' => array(
      'name' => array(
        'label' => 'Set name',
        'description' => 'The name of this set entity',
        'weight' => 0,
      ),
    ),
    'display' => array(
      'name' => array(
        'label' => 'Set name',
        'description' => 'The name of this set entity',
        'weight' => 0,
      ),
    ),
  );
  return $extra;
}

/**
 *  Implements hook_init().
 */
function longform_entities_init() {
  // For now, add includes here.
  // @todo: If it turns out they really are global, move them to .info.
  module_load_include('inc', 'longform_entities', 'longform_entities.relation');
}

/**
 * Get the currently loaded longform entity. Equivalent to menu_get_object().
 *
 */
function longform_entities_get_entity() {
  $menu_item = menu_get_item();
  $set = $menu_item['map'][1]->data;
  return $set;
}

/**
 * Implements hook_forms().
 *
 * Allows factory-generated forms to be present multiple times on a page.
 * Note that to invoke one of these forms, a unique ID must be appended to the form function name.
 * Example: drupal_get_form('form_name_01') or drupal_get_form('form_name_02').
 *
 * See http://drupal.org/node/1970846.
 */
function longform_entities_forms($form_id, $args) {
  $forms = array();
  if (stripos($form_id, 'longform_entities_ticket_title_edit_form_') !== FALSE) {
    $forms[$form_id] = array('callback' => 'longform_entities_ticket_title_edit_form');
  }
  return $forms;
}

/**
 * Implementation of custom panels panes
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function longform_entities_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}


/**
 *  Custom widget implementation
 */


/**
 *  Implements hook_field_formatter_info().
 */
function longform_entities_field_formatter_info() {
  $references = array(
    'set_ticket_view' => array(
      'label' => 'Ticket view for sets',
      'description' => 'Reformats ticket entityreferences to show more relevant info',
      'field types' => array('entityreference'),
      'settings' => array(),
    ),
  );
  return $references;
}

/**
 *  Implements hook_field_formatter_view().
 *
 *  Widgets are expected to return render arrays inside an index array,
 *  so we return our single result as array[0] => render_array.
 *
 */
function longform_entities_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return false;//(array(0 => longform_administer_tickets($entity, $items)));
}

/**
 * Interactive display of entity reference fields.
 * Administrators will see additional administrative options including edit, delete, and add.
 *
 * @param $form
 * @param $form_state
 *
 * @param $set
 *  The currently loaded entity, passed in from hook_field_formatter_view()
 *
 * @param $items
 *  An array of items, passed in from hook_field_formatter_view()
 *
 */



/**
 * Provides an edit field for the ticket title, if the user is allowed to change ticket titles
 *
 * @param $ticket
 *  The ticket object passed in from the form constructor functions
 *
 * @return array
 */
function longform_entities_ticket_title_edit_form($form, &$form_state, $ticket) {
  $form_state['longform']['longform_ticket'] = $ticket;
  $form_state['longform']['tid'] = $ticket->tid->value();
  $form = array(
    '#prefix' => '<div id="ajax-replace-' . $ticket->tid->value() . '">',
    '#suffix' => '</div>',
  );
  $form['wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('input-group', 'col-sm-12', 'title-wrapper-' . $ticket->tid->value()),
    ),
  );
  if (!isset($form_state['input']['field']) || $form_state['input']['field'] === $form_state['values']['field']) {
    $title_value = isset($form_state['values']['field']) ? $form_state['values']['field'] : $ticket->title->value();
  }
  else {
    $title_value = $form_state['input']['field'];
  }
  $form['wrap']['raw'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('raw-title'),
    ),
  );
  $form['wrap']['raw']['title'] = array(
    '#markup' => '<div class="title">' . $title_value . '<a class="btn btn-default pull-right" data-toggle="collapse" data-target="#title-edit-' . $ticket->tid->value() . '">&nbsp;<span class="glyphicon glyphicon-edit"></span></a></div>',
  );
  $form['wrap']['collapser'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('collapse'),
      'id' => 'title-edit-' . $ticket->tid->value(),
    ),
  );
  $form['wrap']['collapser']['edit'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('edit-title', 'input-group'),
      'id' => 'title-edit-' . $ticket->tid->value(),
    ),
  );
  $form['wrap']['collapser']['edit']['field'] = array(
    '#type' => 'textfield',
    '#value' => $ticket->title->value(),
    '#attributes' => array(
      'class' => array('form-control'),
    ),
  );
  $form['wrap']['collapser']['edit']['submit'] = array(
    '#type' => 'submit',
    '#value' => '<span class="glyphicon glyphicon-ok"></span>', //t('Update'),
    '#attributes' => array(
      'class' => array('btn-success'),
    ),
    '#prefix' => '<span class="input-group-btn">',
    '#suffix' => '</span>',
    '#ajax' => array(
      'callback' => 'longform_entities_ticket_title_edit_form_callback',
      'wrapper' => 'ajax-replace-' . $ticket->tid->value(),
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

//function longform_entities_ticket_title_edit_form_validate($form, &$form_state) {
//
//}

function longform_entities_ticket_title_edit_form_callback($form, &$form_state) {
  $tid = $form_state['longform']['tid'];
  $form_state['rebuild'] = TRUE;
  if ($form_state['input']['field'] === $form_state['values']['field']) {
    // Nothing changed.
    return $form;
  }

  // The value was changed -- update the ticket.
  $ticket = entity_metadata_wrapper('longform_ticket', $tid);
  $ticket->title = $form_state['input']['field'];
  $ticket->save();
  return drupal_rebuild_form($form_state['build_info']['form_id'], $form_state);
}


/**
 * Provides an edit field for the ticket title, if the user is allowed to change ticket titles
 *
 * @param $ticket
 *  The ticket object passed in from the form constructor functions
 *
 * @return array
 */
function longform_entities_manage_release_edit_form($form, &$form_state, $set) {
  $entity = $set;
  $set = entity_metadata_wrapper($set->type, $set);

  $form_state['longform']['longform_set'] = $set;
  $form_state['longform']['sid'] = $set->sid->value();
  if (!isset($form_state['input']['releasefield'])) {
    $field_value = isset($form_state['values']['releasefield']) ? $form_state['values']['releasefield'] : $set->field_software_release->value()->name;
  }
  else {
    $field_value = $form_state['input']['releasefield'];
  }
  $form = array(
    '#prefix' => '<div id="ajax-replace-release">',
    '#suffix' => '</div>',
  );

  $form['wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('release-wrapper-' . $set->sid->value()),
    ),
  );

  $form['wrap']['edit-trigger'] = array(
    '#markup' => '<h2>' . $field_value . '</h2>',
  );

  $form['wrap']['form-wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('form-hide-wrapper', 'collapse'),
      'id' => 'edit-release-form',
    ),
  );

  $form['wrap']['form-wrap']['fieldgroup'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('input-group'),
    ),
  );
  $form['wrap']['form-wrap']['fieldgroup']['releasefield'] = array(
    '#type' => 'textfield',
    '#value' => $field_value,
    '#attributes' => array(
      'class' => array('form-control'),
    ),
  );
  $form['wrap']['form-wrap']['fieldgroup']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#prefix' => '<span class="input-group-btn">',
    '#suffix' => '</span>',
    '#ajax' => array(
      'callback' => 'longform_entities_manage_release_edit_form_callback',
      'wrapper' => 'ajax-replace-release',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}

function longform_entities_manage_release_edit_form_callback($form, &$form_state) {

  $sid = $form_state['longform']['sid'];

  if ($form_state['input']['releasefield'] === $form_state['values']['releasefield']) {
    // Nothing changed.
    return $form;
  }

  // The value was changed -- update the set.
  $set = entity_metadata_wrapper('longform_set', $sid);
  // Attempt to load the term provided
  $vocab = taxonomy_vocabulary_machine_name_load('software_release');
  $input_term = $form_state['input']['releasefield'];
  $loaded_term = reset(taxonomy_get_term_by_name($input_term, $vocab->machine_name));
  if(!empty($loaded_term)) {
    $set->field_software_release->set($loaded_term->tid);
    $set->save();
  }
  else {
    // New term, add it to the list and rebuild

    // Create the new term
    $term = new stdClass();
    $term->vid = $vocab->vid;
    $term->name = $input_term;
    $term->parent = 0;
    taxonomy_term_save($term);

    // Update the current set
    $set->field_software_release->set($term->tid);
    $set->save();
  }
  $form_state['rebuild'] = TRUE;
  return drupal_rebuild_form($form_state['build_info']['form_id'], $form_state);
}

/**
 * Provides an edit field for the ticket title, if the user is allowed to change ticket titles
 *
 * @param $ticket
 *  The ticket object passed in from the form constructor functions
 *
 * @return array
 */
function longform_entities_manage_publish_date_edit_form($form, &$form_state, $set) {
  $entity = $set;
  $set = entity_metadata_wrapper($set->type, $set);

  $form_state['longform']['longform_set'] = $set;
  $form_state['longform']['sid'] = $set->sid->value();

  if (!isset($form_state['input']['publish_date_field'])) {
    $field_value = isset($form_state['values']['publish_date_field']) ? strtotime(reset($form_state['values']['publish_date_field'])) : $set->field_publish_date->value();
  }
  else {
    $field_value = strtotime(reset($form_state['input']['publish_date_field']));
  }

  $date_formatted = date('M. d, Y', $field_value);
  $form = array(
    '#prefix' => '<div id="ajax-replace-publish-date">',
    '#suffix' => '</div>',
  );

  $form['wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('publish-date-wrapper-' . $set->sid->value()),
    ),
  );

  $form['wrap']['edit-trigger'] = array(
    '#markup' => '<h2>' . $date_formatted . '</h2>',
  );

  $form['wrap']['form-wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('form-hide-wrapper', 'collapse'),
      'id' => 'edit-publish-date-form',
    ),
  );

  $form['wrap']['form-wrap']['fieldgroup'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('input-group'),
    ),
  );

  $form['wrap']['form-wrap']['fieldgroup']['publish_date_field'] = array(
    '#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => t('Select a new publish date'),
    '#default_value' => $date_formatted,
    '#date_format' => 'M. d, Y',
    '#date_label_position' => 'within',
  );
  $form['wrap']['form-wrap']['fieldgroup']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('btn-success')
    ),
    '#value' => '<span class="glyphicon glyphicon-ok"></span>',
    '#prefix' => '<span class="input-group-btn">',
    '#suffix' => '</span>',
    '#ajax' => array(
      'callback' => 'longform_entities_manage_publish_date_edit_form_callback',
      'wrapper' => 'ajax-replace-publish-date',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}

function longform_entities_manage_publish_date_edit_form_callback($form, &$form_state) {

  $sid = $form_state['longform']['sid'];

  if ($form_state['input']['publish_date_field'] === $form_state['values']['publish_date_field']) {
    // Nothing changed.
    drupal_set_message('nothing changed.');
    return $form;
  }

  // Convert the entered time back into a timestamp.
  // Uses strtotime(), because month is formatted as a string and not a number and is not ambiguous,
  // @todo: but should still probably be strptime() to be safe!
  $input_value = reset($form_state['input']['publish_date_field']);
  $input_value = strtotime($input_value);

  // The value was changed -- update the set.
  $set = entity_metadata_wrapper('longform_set', $sid);

    $set->field_publish_date->set($input_value);
    $set->save();

  $form_state['rebuild'] = TRUE;
  return drupal_rebuild_form($form_state['build_info']['form_id'], $form_state);
}

function longform_entities_manage_products_form($form, &$form_state, $set) {

  $wrap = entity_metadata_wrapper($set->type, $set);
  $current_products = array();
  foreach($wrap->field_product->getIterator() as $product) {
    $current_products[$product->value()->tid] = $product->value()->name;
  }
  $form_state['longform']['longform_set'] = $set;
  $form_state['longform']['current_products'] = $current_products;
  $form_id = $form_state['build_info']['form_id'];
  $data_store_element = 'data-store-' . $form_id;

  // Include the current tags as a JS setting. JS will pre-fill the form appropriately.
  $settings = array(
    'longformEntities' => array(
       $form_id => array(
          'minimumSelectionCount' => 1,
          'maximumSelectionCount' => NULL,
          'allowMultipleInstances' => FALSE,
          'selectDeepestOnly' => FALSE,
          'existingTerms' => $current_products,
          'dataStoreElement' => 'data-store-' . $form_id,
      ),
    ),
  );
  drupal_add_js($settings, 'setting');

  // Build the form.
  $form = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal', 'fade', 'multiselect'),
      'id' => 'edit-products-modal',
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'longform_entities') . '/js/term-multiselect.js',),
      'css' => array(drupal_get_path('module', 'longform_entities') . '/css/term-multiselect.style.css',),
    ),
    '#prefix' => '<div class="ajax-update-products">',
    '#suffix' => '</div>',
  );
  $form['dialog'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-dialog', 'modal-lg'),
    ),
  );

  $form['dialog']['modal-content'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-content'),
    ),
  );
  $form['dialog']['modal-content']['modal-header'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-header'),
    ),
  );
  $form['dialog']['modal-content']['modal-header']['content'] = array(
    '#markup' =>
      '<button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
        <h4 class="modal-title">' . t('Change product assigments for this set') . '</h4>',
  );
  $form['dialog']['modal-content']['modal-body'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-body'),
    ),
  );
  $form['dialog']['modal-content']['modal-body']['content'] = array(
    'switcher' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('panel'),
      ),
      'selector' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('panel-body'),
        ),
        'build_container' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('build-container'),
          ),
          'title' => array(
            '#markup' => '<h4>Selected products</h4>',
          ),
          'container-inner' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('build-container-inner'),
            ),
            'build-list' => array('#markup' => '<ul class="build-container-list nav nav-pills"></ul>'),
          ),
        ),

        'contents' => array('#markup' => book_nav_vocab_nav_block('product','term'))
      ),
    ),
    'term_selection' => array(
      '#type' => 'hidden',
      '#value' => '',
      '#attributes' => array(
        'class' => array('data-store'),
        'id' => $data_store_element,
      ),
    )
  );

  $form['dialog']['modal-content']['modal-footer'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-footer'),
    ),
  );
  $form['dialog']['modal-content']['modal-footer']['message'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('col-md-9', 'message-container'),
    ),
  );

  $form['dialog']['modal-content']['modal-footer']['cancel'] = array(
    '#markup' => '<button type="button" class="btn btn-default ticket-add-cancel" data-dismiss="modal">' . t('Cancel') . '</button>',
  );

  $form['dialog']['modal-content']['modal-footer']['submit'] = array(
    '#type' => 'submit',
    '#id' => 'update-products-submit',
    '#submit' => array('longform_entities_manage_products_callback'),
    '#value' => t('Update Products'),
    '#attributes' => array(
      'class' => array('disabled'),
    ),
//    '#ajax' => array(
//      'callback' => 'longform_entities_manage_products_callback',
//      'wrapper' => 'ajax-update-products',
//      'method' => 'replace',
//      'effect' => 'fade',
//    ),

  );

  return $form;

}

/**
 * Submit function for longform_entities_manage_products_form(): add tickets
 *
 * @param $form
 * @param $form_state
 */
function longform_entities_manage_products_callback($form, &$form_state) {
  $set = $form_state['longform']['longform_set'];
  $set_wrap = entity_metadata_wrapper('longform_set', $set->sid);
  $terms_to_add = explode(',', $form_state['input']['term_selection']);
  $added = '';

  $sid = $set->sid;

  if ($form_state['input']['term_selection'] === $form_state['values']['term_selection']) {
    // Nothing changed.
    return $form;
  }

  // The value was changed -- update the set.
  if(!empty($terms_to_add)) {
    $set_wrap->field_product->set($terms_to_add);
    $set_wrap->save();
    drupal_set_message(t('Document set products were updated.'));

    $tickets = longform_relation_get_tickets_in_set($set);
    foreach ($tickets as $ticket) {
      $ticket = reset($ticket);
      $ticket->field_product = $set->field_product;
      entity_save($ticket->type, $ticket);
      $updated[] = $ticket->title;
    }
    if (!empty($updated)) {
      drupal_set_message('Updated product information in these tickets:<ul><li>' . implode('</li><li>', $updated) . '</li></ul>');
    }

  }
  // AJAX version doesn't work nicely with modals... so this is stashed until I figure out how to do it:
  //  $form_state['rebuild'] = TRUE;
  //  return drupal_rebuild_form($form_state['build_info']['form_id'], $form_state);
}


/**
 * Returns an array of fields found in both provided entities.
 *
 * example:
 *  To find fields common in document ticket entities and book nodes, call this function
 *  like this:
 *    $fields = longform_get_common_fields('longform_ticket', 'longform_ticket', 'node', 'book');
 *
 */
function longform_get_common_fields($first_entity_type, $first_entity_bundle, $second_entity_type, $second_entity_bundle){
  $fields =  array_filter(
    field_info_field_map(),
    function($array) use ($first_entity_type, $first_entity_bundle, $second_entity_type, $second_entity_bundle){
      if(isset ($array['bundles'][$first_entity_type])
        && isset ($array['bundles'][$second_entity_type])
        && in_array($first_entity_bundle, $array['bundles'][$first_entity_type])
        && in_array($second_entity_bundle, $array['bundles'][$second_entity_type])) {
          return TRUE;
      }
      else {
        return FALSE;
      }
    });
  return array_keys($fields);
}

/**
 * Returns a comma-separated list of software release terms
 *
 * @param $ticket
 *  A wrapped ticket entity
 *
 * @return
 *  A comma-separated list of software release terms found on the ticket entity
 */
function longform_ticket_get_releases($ticket) {
  return longform_ticket_get_terms($ticket, 'field_software_release');
}
/**
 * Returns a comma-separated list of software release terms
 *
 * @param $ticket
 *  A wrapped ticket entity
 *
 * @return
 *  A comma-separated list of software release terms found on the ticket entity
 */
function longform_ticket_get_doctypes($ticket) {
  return longform_ticket_get_terms($ticket, 'field_document_type');
}

/**
 * @param $ticket
 *  A wrapped ticket entity
 *
 * @param $term
 *  A term machine name to get
 *
 * @param string $mode
 *  The format that should be returned. Options are:
 *    'csv' (default) : comma-separated string
 *    'array' : associative array, keyed by TID
 *
 * @return
 *  Either a string or an array, as determined by $mode
 */
function longform_ticket_get_terms($ticket, $term, $mode = 'csv') {
  if (!isset($ticket->$term)) {
    return '&mdash;';
  }
  $out = array();
  foreach ($ticket->$term->getIterator() as $delta => $item) {
    $out[$item->tid->value()] = $item->name->value();
  }
  switch ($mode) {
    case 'array':
      return $out;
    break;

    case 'list' :
      return array(
        '#theme' => 'item-list',
        '#title' => NULL,
        '#type' => 'ul',
        '#attributes' => NULL,
        '#items' => $out,
      );
    break;

    case 'csv':
      return implode(', ', $out);
    break;
  }
}

/**
 * Implements hook_permission().
 */
function longform_entities_permission() {
  return array(
    'administer tickets' => array(
      'title' => t('Administer Longform Tickets'),
    ),
    'view tickets' => array(
      'title' => t('View Longform Tickets'),
    ),
    'administer_sets' => array(
      'title' => t('Administer Longform Sets'),
    ),
    'view sets' => array(
      'title' => t('View Longform Sets'),
    ),
  );
}

/**
 * Provide access check for administering tickets
 *
 */
function longform_ticket_access_callback($op, $ticket = NULL, $account = NULL) {
  if ($op == 'view' && user_access('view tickets', $account)) {
    return TRUE;
  }
  else if (user_access('administer tickets', $account)) {
    return TRUE;
  }
}

/**
 * Provide access check for administering sets
 *
 */
function longform_set_access_callback($op, $set = NULL, $account = NULL) {
  if ($op == 'view' && user_access('view sets', $account)) {
    return TRUE;
  }
  else if (user_access('administer sets', $account)) {
    return TRUE;
  }
}

/**
 * Implements hook_load().
 *
 */
function longform_entities_longform_ticket_load($id) {
  //dpm($id, 'loading');
}

class LongformTicket extends Entity {

  /**
   * Override this in order to implement a custom default URI and specify
   * 'entity_class_uri' as 'uri callback' hook_entity_info().
   */
  protected function defaultUri() {
    return array('path' => 'ticket/' . $this->identifier());
  }
}


class LongformTicketController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    $build['title'] = array(
      '#type' => 'markup',
      '#markup' => '<h1>This ticket is: ' . $entity->title . '</h1>',
    );
    $build['owner'] = array(
      '#markup' => 'Created by ' . user_load($entity->uid)->name . ' on ' . date('l F d, Y', $entity->created),
    );
    return $build;
  }

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    global $user;
    if($entity->is_new == TRUE) {
      $entity->created = REQUEST_TIME;
    }
    $entity->uid = $user->uid;
    return parent::save($entity, $transaction);
  }

  }


/**
 * Class LongformTicketUIController
 *
 * Extends EntityDefaultUIController
 *
 * Provides administration UI functions
 */
class LongformTicketUIController extends EntityDefaultUIController {

  /**
   * Generates the table headers for the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Ticket name'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }
}

/**
 * Class LongformSet
 *
 * Extends entity class
 *
 */
class LongformSet extends Entity {

  /**
   * Override this in order to implement a custom default URI and specify
   * 'entity_class_uri' as 'uri callback' hook_entity_info().
   */
  protected function defaultUri() {
    return array('path' => 'set/' . $this->identifier());
  }
}


/**
 * Class LongformSetController
 *
 * Extends EntityAPI Controller (view and CRUD)
 *
 */
class LongformSetController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    $build['name'] = array(
      '#type' => 'markup',
      '#markup' => '<h1>This set is called: ' . $entity->name . '</h1>',
    );
    $build['owner'] = array(
      '#markup' => 'Created by ' . user_load($entity->uid)->name . ' on ' . date('l F d, Y', $entity->created),
    );
    return $build;
  }

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    global $user;

    if(isset($entity->is_new) && $entity->is_new == TRUE) {
      $entity->created = REQUEST_TIME;
    }
    $entity->uid = $user->uid;
    return parent::save($entity, $transaction);
  }

}


/**
 * Class LongformSetUIController
 *
 * Extends EntityDefaultUIController
 *
 * Provides administration UI functions
 */
class LongformSetUIController extends EntityDefaultUIController {

  /**
   * Generates the table headers for the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Set name'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }
}

/**
 * Implements hook_menu().
 */
function longform_entities_menu() {
  $items = array();
  $items['longform_demo'] = array(
    'title' => 'Demo page',
    'page callback' => 'longform_entities_demo_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  $items['ticket'] = array(
    'title' => 'Ticket page',
    'page callback' => 'longform_entities_ticket_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  $items['set'] = array(
    'title' => 'Set page',
    'page callback' => 'longform_entities_set_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  return $items;
}


/**
 *  Callback for ticket view page.
 *
 */
function longform_entities_ticket_page($tid) {

  // This should fit in an autoloader, but hook_load() doesn't seem to fire
  $ticket = reset(entity_load('longform_ticket', array($tid)));
  $ticket_entity = entity_view('longform_ticket', array($ticket->tid => $ticket));
  drupal_set_title($ticket->title);
  return $ticket_entity;
}
/**
 *  Callback for set view page.
 *
 */
function longform_entities_set_page($sid) {
  // This should fit in an autoloader, but hook_load() doesn't seem to fire
  $set = reset(entity_load('longform_set', array($sid)));
  $set_entity = entity_view('longform_set', array($set->tid => $set));
  drupal_set_title($set->title);
  return $set_entity;
}

/**
 * Callback for /longform page.
 *
 */
function longform_entities_demo_page() {
  $ticket = entity_load('longform_ticket', array(1));
//dpm(entity_get_info('longform_ticket'), 'ticket info');
//   Or load it with EFQ.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'longform_ticket');
  $results = $query->execute();
  return 'hello there!';
}

/**
 *  Library functions
 */


/**
 * Workflow implementation
 */


/**
 * Get the current workflow state of the passed-in entity.
 *
 * @param $entity
 *  A loaded entity.
 *
 * @return mixed
 *  The loaded workflow state object
 */
function longform_get_current_workflow_state($entity) {
  $field_name = longform_workflow_field_name($entity);
  $state = isset($field_name) ? workflow_node_current_state($entity, $entity->type == 'book' || $entity->type == 'topic' ? 'node' : $entity->type, $field_name) : FALSE;
  return workflow_state_load($state);
}

/**
 * Get a list of valid workflow states for a given entity.
 *
 * Assumes one workflow per entity.
 *
 * @param $entity
 *  The loaded entity object.
 *
 * @return array
 *  An array of valid workflow state names, keyed by sid.
 */
function longform_workflow_get_states($entity) {
  $field_name = longform_workflow_field_name($entity);
  return workflowfield_options_list($entity->$field_name, NULL, $entity->type, $entity);
}
/**
 * Set the workflow field name per entity.
 *
 * @todo: find a way to automatically determine this?
 *
 * @var $entity
 *  The loaded entity
 *
 */
function longform_workflow_field_name($entity) {
  switch ($entity->type) {
    case 'longform_ticket':
      return 'field_ticket_publishing_workflow';
      break;
    case 'longform_set':
      return 'field_set_publishing_workflow';
      break;
    case 'book':
      return 'field_page_publishing_workflow';
    default:
      return '';
  }
}

/**
 * Set a new workflow state on an entity.
 *
 * @param $entity
 *  The loaded entity object
 *
 * @param $id_property
 *  the primary ID key for this entity type, e.g. 'tid', 'sid', 'nid', etc.
 *
 * @param $new_state
 *  Either the numeric state ID to set, or a state object, or a string representing the state name.
 *
 * @param $user_reassign
 *  A user object to attribute the state change to. Optional. Defaults to the current user.
 *
 * @param $comment
 *  (optional). A comment string to attach to the transition. May be left blank.
 *
 */
function longform_workflow_set_state($entity, $id_property, $new_state, $user_reassign = NULL, $comment = '') {
  global $user;
  $uid = (isset($user_reassign) && is_object($user_reassign)) ? $user_reassign->uid : $user->uid;

  $entity_type = $entity->type;
  $field_name = longform_workflow_field_name($entity);
  $old_state = longform_get_current_workflow_state($entity);
  $old_sid = $old_state->sid;
  switch (gettype($new_state)) {
    case 'string':
      $new_state = longform_workflow_find_state_by_name($old_state->getStates(), $new_state);
      break;
    case 'integer':
      $new_state = workflow_state_load($new_state);
      break;
  }

  if ($new_state->sid == $old_state->sid) {
    //drupal_set_message('Entity "' . $entity->title . '" is already in workflow state "' . $new_state->state . '". Cannot execute transition.', 'warning');
    return FALSE;
  }
  // Set up transition, execute, and save. Reset entity cache so the new value shows up immediately.
  $transition = new WorkflowTransition();
  $transition->setValues($entity_type, $entity, $field_name, $old_sid, $new_state->sid, $uid, REQUEST_TIME, $comment);
  $new_sid = $transition->execute(TRUE);

  $wrap = entity_metadata_wrapper($entity->type == 'book' || $entity->type == 'topic' ? 'node' : $entity->type, $entity);
  $wrap->$field_name->set($new_sid);
  $wrap->save();
  return $new_sid;
}

/**
 * Given an array of state objects, looks for one with a "name" property matching $search.
 *
 * If found, returns the state object. If not found, returns FALSE.
 *
 * @param $states
 *  array of state objects
 * @param $search
 *  A string to search for among the "name" properties.
 *
 * @return
 *  a matching state object if found, otherwise FALSE
 */
function longform_workflow_find_state_by_name($states, $search) {
  foreach ($states as $state) {
    if ($state->name == $search) {
      return $state;
    }
  }
  return FALSE;
}

/**
 * Show a bootstrap progress bar for a workflow path.
 *
 * @param $entity
 *  The loaded entity
 * @param bool $show_percent
 *  Show the percentage value of completion in the progress bar
 * @param string $class
 *  One of the bootstrap contextual classes. Defaults to "info".
 *
 * return
 *  A render array for the object.
 */
function longform_workflow_progress_bar($entity, $class = '') {
  $state = longform_get_current_workflow_state($entity);
  $states = $state->getStates();
  $state_pos = array_search($state->sid, array_keys($states));

  $percent = round($state_pos / count($states) * 100, 0);

  if ($percent <= 20) {
    $bar_class = 'danger';
  }
  if ($percent > 20) {
    $bar_class = 'warning';
    $text_class = 'warning';
  }
  if ($percent > 80) {
    $bar_class = 'info';
  }
  if ($percent > 99) {
    $bar_class = 'success';
  }
  $out = array();
  $out['wrap'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('progress'),
    ),
  );
  $out['wrap']['progress'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('progress-bar' , (isset($bar_class) ? 'progress-bar-' . $bar_class : ''), ),
      'style' => 'width: ' . $percent . '%',
    ),
  );
  $out['wrap']['progress']['state'] = array(
    '#markup' => '<span' . (isset($text_class) ? ' class="text-' . $text_class . '"' : '') . '>' . $state->state . '</span>',
  );

  return $out;
}